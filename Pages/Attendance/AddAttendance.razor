@page "/attendance/addattendance"
@using EmployeeManagementSystem.Data.Models
@using EmployeeManagementSystem.Data.Services
@inject NavigationManager NavigationManager

<h1>Add Attendance</h1>

<EditForm Model="@attendance" OnValidSubmit="@AddAttendanceRecord">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div class="form-group">
		<label for="employeeId">Employee:</label>
		<select class="form-control" id="employeeId" @bind="@attendance.EmployeeId">
			<option value="Select Employee">Select Employee</option>
			@foreach (var employee in Employees)
			{
						<option value="@employee.Id">@employee.Name</option>
			}
		</select>
		<ValidationMessage For="@(() => attendance.EmployeeId)" />
	</div>

	<div class="form-group">
		<label for="date">Date:</label>
		<InputDate class="form-control" id="date" @bind-Value="@attendance.Date" />
		<ValidationMessage For="@(() => attendance.Date)" />
	</div>

	<div class="form-group">
		<label for="status">Status:</label>
		<select class="form-control" id="status" @bind="@attendance.Status">
			<option value="Present">Present</option>
			<option value="Absent">Absent</option>
		</select>
		<ValidationMessage For="@(() => attendance.Status)" />
	</div>

	<button type="submit" class="btn btn-primary mt-4">Add Attendance Record</button>
</EditForm>

@code {
	private List<Employee> Employees = new List<Employee>();
	private Attendance attendance = new Attendance();

	protected override async Task OnInitializedAsync()
	{
		attendance.Date = DateTime.Now;
		Employees = await EmployeeService.Instance.GetEmployeeAsync();
	}

	private async Task AddAttendanceRecord()
	{
		if (await AttendanceService.Instance.AddAttendanceAsync(attendance))
		{
			NavigationManager.NavigateTo("/attendance");
		}
	}
}
